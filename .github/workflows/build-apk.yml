name: Build Android APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-8-jdk wget unzip zip squashfs-tools git python3-dev build-essential
        
    - name: Install Android SDK command-line tools and build-tools
      run: |
        ANDROID_SDK_ROOT="$HOME/Android/Sdk"
        mkdir -p "$ANDROID_SDK_ROOT"/cmdline-tools
    
        # Download latest command-line tools
        cd /tmp
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip
    
        # Move into the expected layout
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        if [ -d "cmdline-tools" ]; then
          mv cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
        elif [ -d "tools" ]; then
          mv tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
        else
          echo "No cmdline-tools or tools directory found after unzipping"
          exit 1
        fi
    
        # Persist env vars for later steps
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
    
        # Add sdktool and platform-tools/build-tools to PATH for this workflow
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
    
        # Install platform-tools, a platform and build-tools (contains aidl)
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-29" "build-tools;29.0.3" "build-tools;30.0.3"
    
        # Accept licenses
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses
    
        # Ensure buildozer's expected SDK path points to the SDK we installed
        mkdir -p "$HOME/.buildozer/android/platform"
        ln -sfn "$ANDROID_SDK_ROOT" "$HOME/.buildozer/android/platform/android-sdk"
        
        # CRITICAL FIX: Create symlink for old-style tools path that Buildozer expects
        mkdir -p "$HOME/.buildozer/android/platform/android-sdk"
        ln -sfn "$ANDROID_SDK_ROOT/cmdline-tools/latest" "$HOME/.buildozer/android/platform/android-sdk/tools"
    
        # Add the installed build-tools directory to PATH so 'aidl' can be found
        if [ -d "$ANDROID_SDK_ROOT/build-tools/30.0.3" ]; then
          echo "$ANDROID_SDK_ROOT/build-tools/30.0.3" >> $GITHUB_PATH
        elif [ -d "$ANDROID_SDK_ROOT/build-tools/29.0.3" ]; then
          echo "$ANDROID_SDK_ROOT/build-tools/29.0.3" >> $GITHUB_PATH
        fi
    
        # Debug: show where AIDL is (should be present)
        echo "Listing build-tools and aidl:"
        ls -la "$ANDROID_SDK_ROOT/build-tools" || true
        find "$ANDROID_SDK_ROOT" -type f -name aidl -exec ls -la {} \; || true
        
    - name: Install Python dependencies
      run: |
        pip install buildozer cython
        
    - name: Build APK
      run: |
        buildozer android debug
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk
